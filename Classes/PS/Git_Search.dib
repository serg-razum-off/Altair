#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# This Notebook explores Search-in-GIT possibilities

#!markdown

### Basic Solution

#!pwsh

# Define the SearchResult class
class SearchResult {
    [datetime]$Date
    [string]$BranchName
    [string]$CommitHash
    [string]$FileName
    [int]$LineNumber
    [string]$LineContent
}

#!pwsh

# Define the Search-GitCommits function
function Search-GitCommits {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$BranchName,
        [Parameter(Mandatory = $true)]
        [string]$RegexPattern
    )

    # Step 2: grab all Commits of the Branch
    $commits = git log --format="%h" "kggl_videogames"

    # Step 3: loop through the text of Commits and search for the RegEx pattern
    $results = New-Object System.Collections.ArrayList
    foreach ($commit in $commits) {
        $date = git show --format="%ci" -s $commit
        $files = git show --pretty="" --name-only $commit
        foreach ($file in $files) {
            $lines = git show "$commit`:$file"
            
                $lineNumber = 0
                foreach ($line in $lines) {
                    $lineNumber++
                    if ($line -match $regexPattern) {
                        # Step 4: create a SearchResult object and add it to the array
                        $searchResult = [SearchResult]@{
                            Date = [datetime]::ParseExact($date.Trim(), "yyyy-MM-dd HH:mm:ss zzz", $null)
                            BranchName = $branchName
                            CommitHash = $commit
                            FileName = $file
                            LineNumber = $lineNumber
                            LineContent = $line
                        }
                        [void]$results.Add($searchResult)
                    }
                }
                
        }  
    }

    # Step 5: return the results
    return $results
}

#!pwsh

$branchName = "kggl_videogames"
$regexPattern="# create a second y-axis with a different scale"

$results = Search-GitCommits -BranchName $branchName -RegexPattern $regexPattern

#!pwsh

$results

#!pwsh

# group by LineContent and get the earliest Date
$uniqueResults = $results |
    Group-Object LineContent |
    ForEach-Object {
        $_.Group | Sort-Object Date | Select-Object -First 1
    }

# output the unique results
$uniqueResults

#!markdown

### Optimizing Basic Solution

#!markdown

Make simple Example with 
$results = [System.Collections.Generic.List[SearchResult]]::new()

#!pwsh

 $commits = git log --format="%h" "kggl_videogames"
 $commits | Select-Object -First 5

#!pwsh

$files = git show --pretty="" --name-only 191d448
$files

#!pwsh

$regexPattern="# create a second y-axis with a different scale"

#!pwsh

$file = $files[0]

$lines = git show "$commit`:$file"

$lines -match $regexPattern
    
